{
	"index": {
		"prefix": "index-default",
		"description": "Scaffolds an index file for a feature that exports the default export of a component",
		"body": [
			"export { default } from \"./${1:component}\""
		],
		"scope": "typescript,javascript"
	},
	"index-duck": {
		"prefix": "index-duck",
		"description": "Creates index file with default component and duck export",
		"body": [
			"export { default } from \"./${1:component}.connector\"",
			"export * from \"./${2:duck}.duck\""
		]
	},
	"duck": {
		"prefix": "duck",
		"description": "Creates a redux duck stub",
		"body": [
			"import { createAction, handleActions } from \"redux-actions\"",
			"import { I${1}State } from \"./I${1}State\"",
			"",
			"const _ns = \"${2:namespace}\"",
			"export const getState = (state: any): I${1}State => state[_ns] || {}",
			"const action = (name: string, payload?: any) => createAction(`\\${_ns}/\\${name}`, payload) as any",
			"",
			"${0:// write actions and selectors here}",
			"",
			"const reducer = handleActions({",
			"",
			"}, {})",
			"",
			"export const duck = {",
			"\t[_ns]: {",
			"\t\treducer",
			"\t}",
			"}",
			"",
			"export default reducer"
		]
	},
	"state-interface": {
		"prefix": "state-interface",
		"description": "Creates a state interface for a redux state where every field is optional by default",
		"body": [
			"interface I${1:component}StateFields {",
			"\t${0}",
			"}",
			"",
			"export interface I${1}State extends Partial<I${1}StateFields> { }"
		]
	},
	"react-connector": {
		"prefix": "react-connector",
		"description": "Creates react-redux connector",
		"body": [
			"import { connect } from \"react-redux\"",
			"import ${1:component} from \"./${1}\"",
			"",
			"import * as ${2:duck} from \"./${2}.duck\"",
			"",
			"export default connect((state) => ({",
			"\t${0:// Add state selectors here}",
			"}), (dispatch) => ({",
			"\t// Add dispatchers here",
			"}))(${1})"
		]
	},

	"react-ts-func": {
		"prefix": "react-func",
		"description": "Scaffolds a React TypeScript functional component",
		"body": [
			"import React from \"react\"",
			"",
			"export const ${1:component}:React.FC = () => {",
			"\treturn (",
			"\t\t${0}",
			"\t)",
			"}",
			"",
			"export default ${1}"
		],
		"scope": "typescriptreact"
	},
	"react-ts-func-props": {
		"prefix": "react-func-props",
		"description": "Scaffolds a React TypeScript functional component with props",
		"body": [
			"import React from \"react\"",
			"",
			"interface I${1:component}Props {",
			"\t${0}",
			"}",
			"",
			"export const ${1:component}:React.FC<I${1:component}Props> = (props) => {",
			"\treturn ()",
			"}",
			"",
			"export default ${1}"
		],
		"scope": "typescriptreact"
	},
	"react-ts-func-state": {
		"prefix": "react-func-state",
		"description": "Scaffolds a React TypeScript functional component with state hook",
		"body": [
			"import React, { useState } from \"react\"",
			"",
			"export const ${1:component}:React.FC = () => {",
			"\tconst [${2:state}, set${2}] = useState(${3})",
			"\treturn (",
			"\t\t${0}",
			"\t)",
			"}",
			"",
			"export default ${1}"
		],
		"scope": "typescriptreact"
	},
	"react-ts-func-propstate": {
		"prefix": "react-func-propstate",
		"description": "Scaffolds a React TypeScript functional component with props and state hook",
		"body": [
			"import React, { useState } from \"react\"",
			"",
			"interface I${1:component}Props {",
			"\t${0}",
			"}",
			"",
			"export const ${1:component}:React.FC<I${1:component}Props> = (props) => {",
			"\treturn ()",
			"}",
			"",
			"export default ${1}"
		],
		"scope": "typescriptreact"
	},

	"react-ts-error": {
		"prefix": "react-error",
		"description": "Scaffolds a basic error boundary React class component",
		"body": [
			"import React from \"react\"",
			"",
			"interface IErrorBoundaryProps {",
			"\tonError?: React.ElementType",
			"}",
			"",
			"interface IErrorBoundaryState {",
			"\thasError: boolean",
			"}",
			"",
			"export class ${1:name} extends React.PureComponent<IErrorBoundaryProps, IErrorBoundaryState> {",
			"\tpublic state: IErrorBoundaryState = {",
			"\t\thasError: false",
			"\t}",
			"",
			"\tpublic static getDerivedStateFromError() {",
			"\t\treturn { hasError: true }",
			"\t}",
			"",
			"\tpublic componentDidCatch(error: any) {",
			"\t\tconsole.error(error)",
			"\t}",
			"",
			"\tprivate renderError() {",
			"\t\treturn <p>An error occured in this section. See console for details.</p>",
			"\t}",
			"",
			"\tpublic render() {",
			"\t\treturn !this.state.hasError ? this.props.children : this.props.onError || this.renderError()",
			"\t}",
			"}",
			"",
			"export default ${1:name}"
		],
		"scope": "typescriptreact"
	}
}